Question10:----priority  Queue----------------------------------------------------------------------------------------


#include <stdio.h>
#include <stdlib.h>

#define MAX 100

typedef struct {
    int data;
    int priority;
} PriorityQueue;

PriorityQueue queue[MAX];
int size = 0;

void enqueue(int data, int priority) {
    if (size == MAX) {
        printf("Priority Queue is full.\n");
        return;
    }

    queue[size].data = data;
    queue[size].priority = priority;
    size++;

    printf("Inserted %d with priority %d\n", data, priority);
}

void dequeue() {
    if (size == 0) {
        printf("Priority Queue is empty.\n");
        return;
    }

    int highestPriorityIndex = 0;
    for (int i = 1; i < size; i++) {
        if (queue[i].priority > queue[highestPriorityIndex].priority) {
            highestPriorityIndex = i;
        }
    }

    printf("Removed %d with priority %d\n", queue[highestPriorityIndex].data, queue[highestPriorityIndex].priority);
    for (int i = highestPriorityIndex; i < size - 1; i++) {
        queue[i] = queue[i + 1];
    }
    size--;
}

void display() {
    if (size == 0) {
        printf("Priority Queue is empty.\n");
        return;
    }

    printf("Priority Queue:\n");
    for (int i = 0; i < size; i++) {
        printf("Data: %d, Priority: %d\n", queue[i].data, queue[i].priority);
    }
}

int main() {
    int choice, data, priority;

    while (1) {
        printf("\nPriority Queue Menu:\n");
        printf("1. Enqueue\n");
        printf("2. Dequeue\n");
        printf("3. Display\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data and priority: ");
                scanf("%d %d", &data, &priority);
                enqueue(data, priority);
                break;
            case 2:
                dequeue();
                break;
            case 3:
                display();
                break;
            case 4:
                exit(0);
            default:
                printf("Invalid choice.\n");
        }
    }

    return 0;
}




question11 single linklist-----------------------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* head = NULL;

void insert(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = head;
    head = newNode;
}

void delete(int value) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }
    struct Node *temp = head, *prev = NULL;
    if (temp != NULL && temp->data == value) {
        head = temp->next;
        free(temp);
        return;
    }
    while (temp != NULL && temp->data != value) {
        prev = temp;
        temp = temp->next;
    }
    if (temp == NULL) {
        printf("Element not found.\n");
        return;
    }
    prev->next = temp->next;
    free(temp);
}

void modify(int old_value, int new_value) {
    struct Node* temp = head;
    while (temp != NULL) {
        if (temp->data == old_value) {
            temp->data = new_value;
            return;
        }
        temp = temp->next;
    }
    printf("Element not found.\n");
}

void display() {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }
    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    int choice, value, old_value, new_value;
    while (1) {
        printf("\nMenu:\n");
        printf("1. Insert\n");
        printf("2. Delete\n");
        printf("3. Modify\n");
        printf("4. Display\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter value to insert: ");
                scanf("%d", &value);
                insert(value);
                break;
            case 2:
                printf("Enter value to delete: ");
                scanf("%d", &value);
                delete(value);
                break;
            case 3:
                printf("Enter value to modify: ");
                scanf("%d", &old_value);
                printf("Enter new value: ");
                scanf("%d", &new_value);
                modify(old_value, new_value);
                break;
            case 4:
                display();
                break;
            case 5:
                exit(0);
            default:
                printf("Invalid choice\n");
        }
    }
    return 0;
}


question12 single circular linklit---------------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* head = NULL;

void insert(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    if (head == NULL) {
        head = newNode;
        newNode->next = head;
    } else {
        struct Node* temp = head;
        while (temp->next != head) {
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->next = head;
    }
}

void delete(int value) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }
    struct Node *temp = head, *prev = NULL;
    if (temp->data == value) {
        if (temp->next == head) {
            free(temp);
            head = NULL;
        } else {
            while (temp->next != head) {
                temp = temp->next;
            }
            temp->next = head->next;
            free(head);
            head = temp->next;
        }
        return;
    }
    while (temp->next != head && temp->data != value) {
        prev = temp;
        temp = temp->next;
    }
    if (temp->data == value) {
        prev->next = temp->next;
        free(temp);
    } else {
        printf("Element not found.\n");
    }
}

void modify(int old_value, int new_value) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }
    struct Node* temp = head;
    do {
        if (temp->data == old_value) {
            temp->data = new_value;
            return;
        }
        temp = temp->next;
    } while (temp != head);
    printf("Element not found.\n");
}

void display() {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }
    struct Node* temp = head;
    do {
        printf("%d ", temp->data);
        temp = temp->next;
    } while (temp != head);
    printf("\n");
}

int main() {
    int choice, value, old_value, new_value;
    while (1) {
        printf("\nMenu:\n");
        printf("1. Insert\n");
        printf("2. Delete\n");
        printf("3. Modify\n");
        printf("4. Display\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter value to insert: ");
                scanf("%d", &value);
                insert(value);
                break;
            case 2:
                printf("Enter value to delete: ");
                scanf("%d", &value);
                delete(value);
                break;
            case 3:
                printf("Enter value to modify: ");
                scanf("%d", &old_value);
                printf("Enter new value: ");
                scanf("%d", &new_value);
                modify(old_value, new_value);
                break;
            case 4:
                display();
                break;
            case 5:
                exit(0);
            default:
                printf("Invalid choice\n");
        }
    }
    return 0;
}


question13 double circular linklist----------------------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>
#include<string.h>

struct Student {
    int roll_no;
    char name[50];
    struct Student* next;
    struct Student* prev;
};

struct Student* head = NULL;

struct Student* createStudent(int roll_no, char name[]) {
    struct Student* newStudent = (struct Student*)malloc(sizeof(struct Student));
    newStudent->roll_no = roll_no;
    strcpy(newStudent->name, name);
    newStudent->next = newStudent->prev = NULL;
    return newStudent;
}

void insertStudent(int roll_no, char name[]) {
    struct Student* newStudent = createStudent(roll_no, name);
    if (head == NULL) {
        head = newStudent;
        newStudent->next = newStudent->prev = newStudent;
    } else {
        struct Student* last = head->prev;
        last->next = newStudent;
        newStudent->prev = last;
        newStudent->next = head;
        head->prev = newStudent;
    }
}

void deleteStudent(int roll_no) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }
    struct Student* current = head;
    do {
        if (current->roll_no == roll_no) {
            if (current == head && current->next == head) {
                free(current);
                head = NULL;
            } else {
                current->prev->next = current->next;
                current->next->prev = current->prev;
                if (current == head) {
                    head = current->next;
                }
                free(current);
            }
            return;
        }
        current = current->next;
    } while (current != head);
    printf("Student with roll number %d not found.\n", roll_no);
}

void modifyStudent(int roll_no, char newName[]) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }
    struct Student* current = head;
    do {
        if (current->roll_no == roll_no) {
            strcpy(current->name, newName);
            return;
        }
        current = current->next;
    } while (current != head);
    printf("Student with roll number %d not found.\n", roll_no);
}

void displayStudents() {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }
    struct Student* current = head;
    do {
        printf("Roll No: %d, Name: %s\n", current->roll_no, current->name);
        current = current->next;
    } while (current != head);
}

int main() {
    int choice, roll_no;
    char name[50];

    while (1) {
        printf("\nMenu:\n");
        printf("1. Insert Student\n");
        printf("2. Delete Student\n");
        printf("3. Modify Student\n");
        printf("4. Display Students\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter roll number: ");
                scanf("%d", &roll_no);
                printf("Enter name: ");
                scanf("%s", name);
                insertStudent(roll_no, name);
                break;
            case 2:
                printf("Enter roll number to delete: ");
                scanf("%d", &roll_no);
                deleteStudent(roll_no);
                break;
            case 3:
                printf("Enter roll number to modify: ");
                scanf("%d", &roll_no);
                printf("Enter new name: ");
                scanf("%s", name);
                modifyStudent(roll_no, name);
                break;
            case 4:
                displayStudents();
                break;
            case 5:
                exit(0);
            default:
                printf("Invalid choice, try again.\n");
        }
    }

    return 0;
}


question14    binary tree preorder inorder post ,----------------------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}

struct Node* insert(struct Node* root, int data) {
    if (root == NULL) {
        return createNode(data);
    }
    if (data < root->data) {
        root->left = insert(root->left, data);
    } else {
        root->right = insert(root->right, data);
    }
    return root;
}

void preorder(struct Node* root) {
    if (root == NULL) return;
    printf("%d ", root->data);
    preorder(root->left);
    preorder(root->right);
}

void inorder(struct Node* root) {
    if (root == NULL) return;
    inorder(root->left);
    printf("%d ", root->data);
    inorder(root->right);
}

void postorder(struct Node* root) {
    if (root == NULL) return;
    postorder(root->left);
    postorder(root->right);
    printf("%d ", root->data);
}

int main() {
    struct Node* root = NULL;
    int choice, data;

    while (1) {
        printf("\nMenu:\n");
        printf("1. Insert\n");
        printf("2. Preorder Traversal\n");
        printf("3. Inorder Traversal\n");
        printf("4. Postorder Traversal\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data to insert: ");
                scanf("%d", &data);
                root = insert(root, data);
                break;
            case 2:
                printf("Preorder Traversal: ");
                preorder(root);
                printf("\n");
                break;
            case 3:
                printf("Inorder Traversal: ");
                inorder(root);
                printf("\n");
                break;
            case 4:
                printf("Postorder Traversal: ");
                postorder(root);
                printf("\n");
                break;
            case 5:
                exit(0);
            default:
                printf("Invalid choice, try again.\n");
        }
    }

    return 0;
}


question15 binary  tree iterative insert----------------------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}

struct Node* insertIteratively(struct Node* root, int data) {
    struct Node* newNode = createNode(data);
    if (root == NULL) {
        return newNode;
    }
    
    struct Node* current = root;
    struct Node* parent = NULL;
    
    while (current != NULL) {
        parent = current;
        if (data < current->data) {
            current = current->left;
        } else {
            current = current->right;
        }
    }
    
    if (data < parent->data) {
        parent->left = newNode;
    } else {
        parent->right = newNode;
    }
    
    return root;
}

void inorderIteratively(struct Node* root) {
    if (root == NULL) {
        return;
    }

    struct Node* stack[100];
    int top = -1;
    struct Node* current = root;

    while (current != NULL || top != -1) {
        while (current != NULL) {
            stack[++top] = current;
            current = current->left;
        }

        current = stack[top--];
        printf("%d ", current->data);
        current = current->right;
    }
    printf("\n");
}

struct Node* findMin(struct Node* root) {
    while (root && root->left != NULL) {
        root = root->left;
    }
    return root;
}

struct Node* deleteNode(struct Node* root, int data) {
    if (root == NULL) {
        return root;
    }

    struct Node* parent = NULL;
    struct Node* current = root;
    
    while (current != NULL && current->data != data) {
        parent = current;
        if (data < current->data) {
            current = current->left;
        } else {
            current = current->right;
        }
    }

    if (current == NULL) {
        printf("Node with value %d not found.\n", data);
        return root;
    }

    if (current->left == NULL && current->right == NULL) {
        if (current == root) {
            free(current);
            return NULL;
        }
        if (parent->left == current) {
            parent->left = NULL;
        } else {
            parent->right = NULL;
        }
        free(current);
    }
    else if (current->left == NULL || current->right == NULL) {
        struct Node* child = (current->left != NULL) ? current->left : current->right;
        if (current == root) {
            free(current);
            return child;
        }
        if (parent->left == current) {
            parent->left = child;
        } else {
            parent->right = child;
        }
        free(current);
    }
    else {
        struct Node* minNode = findMin(current->right);
        int minValue = minNode->data;
        root = deleteNode(root, minValue);
        current->data = minValue;
    }

    return root;
}

int main() {
    struct Node* root = NULL;
    int choice, data;

    while (1) {
        printf("\nMenu:\n");
        printf("1. Iterative Insert\n");
        printf("2. Iterative Inorder Traversal\n");
        printf("3. Delete Node with Given Information\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data to insert: ");
                scanf("%d", &data);
                root = insertIteratively(root, data);
                break;
            case 2:
                printf("Inorder Traversal: ");
                inorderIteratively(root);
                break;
            case 3:
                printf("Enter data to delete: ");
                scanf("%d", &data);
                root = deleteNode(root, data);
                break;
            case 4:
                exit(0);
            default:
                printf("Invalid choice, try again.\n");
        }
    }

    return 0;
}


question16  -----------------------------------------------------------------------------------------

question17   multilinked matrix-----------------------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node *right, *down;
} Node;

Node* createNode(int data) {
    Node* node = (Node*)malloc(sizeof(Node));
    node->data = data;
    node->right = node->down = NULL;
    return node;
}

void createMatrix(Node** head, int rows, int cols) {
    int i, j, data,k;
    Node *temp, *rowHead, *prev;
    for (i = 0; i < rows; i++) {
        prev = NULL;
        for (j = 0; j < cols; j++) {
            scanf("%d", &data);
            temp = createNode(data);
            if (!*head) *head = temp;
            if (prev) prev->right = temp;
            prev = temp;
            if (i > 0) {
                rowHead = *head;
                for ( k = 0; k < i; k++) rowHead = rowHead->down;
                for (k = 0; k < j; k++) rowHead = rowHead->right;
                rowHead->down = temp;
            }
        }
        if (i == 0) rowHead = *head;
        else rowHead = rowHead->down;
    }
}

void displayMatrix(Node* head) {
    Node* row, *col;
    row = head;
    while (row) {
        col = row;
        while (col) {
            printf("%d ", col->data);
            col = col->right;
        }
        printf("\n");
        row = row->down;
    }
}

int main() {
    Node* head = NULL;
    int rows, cols, choice;
    do {
        printf("\n1. Create Matrix\n2. Display Matrix\n3. Exit\n");
        scanf("%d", &choice);
        if (choice == 1) {
            printf("Enter rows and columns: ");
            scanf("%d %d", &rows, &cols);
            createMatrix(&head, rows, cols);
        } else if (choice == 2) {
            displayMatrix(head);
        }
    } while (choice != 3);
    return 0;
}


question18   multilinked matrix  add------------------------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node *right, *down;
} Node;

Node* createNode(int data) {
    Node* node = (Node*)malloc(sizeof(Node));
    node->data = data;
    node->right = node->down = NULL;
    return node;
}

void createMatrix(Node** head, int rows, int cols) {
    int i, j, data,k;
    Node *temp, *rowHead, *prev;
    for (i = 0; i < rows; i++) {
        prev = NULL;
        for (j = 0; j < cols; j++) {
            scanf("%d", &data);
            temp = createNode(data);
            if (!*head) *head = temp;
            if (prev) prev->right = temp;
            prev = temp;
            if (i > 0) {
                rowHead = *head;
                for ( k = 0; k < i; k++) rowHead = rowHead->down;
                for ( k = 0; k < j; k++) rowHead = rowHead->right;
                rowHead->down = temp;
            }
        }
    }
}

void displayMatrix(Node* head) {
    Node* row, *col;
    row = head;
    while (row) {
        col = row;
        while (col) {
            printf("%d ", col->data);
            col = col->right;
        }
        printf("\n");
        row = row->down;
    }
}

void addMatrices(Node* head1, Node* head2, Node** result, int rows, int cols) {
    int i, j,k;
    Node *temp1, *temp2, *prev = NULL, *tempResult, *rowHead1, *rowHead2;
    rowHead1 = head1;
    rowHead2 = head2;
    for (i = 0; i < rows; i++) {
        temp1 = rowHead1;
        temp2 = rowHead2;
        for (j = 0; j < cols; j++) {
            tempResult = createNode(temp1->data + temp2->data);
            if (!*result) *result = tempResult;
            if (prev) prev->right = tempResult;
            prev = tempResult;
            if (i > 0) {
                rowHead1 = *result;
                for ( k = 0; k < i; k++) rowHead1 = rowHead1->down;
                for (k = 0; k < j; k++) rowHead1 = rowHead1->right;
                rowHead1->down = tempResult;
            }
            temp1 = temp1->right;
            temp2 = temp2->right;
        }
        rowHead1 = rowHead1->down;
        rowHead2 = rowHead2->down;
    }
}

int main() {
    Node *matrix1 = NULL, *matrix2 = NULL, *result = NULL;
    int rows, cols, choice;
    do {
        printf("\n1. Create Matrices\n2. Add Matrices\n3. Display Result\n4. Exit\n");
        scanf("%d", &choice);
        if (choice == 1) {
            printf("Enter rows and columns: ");
            scanf("%d %d", &rows, &cols);
            printf("Enter elements of Matrix 1:\n");
            createMatrix(&matrix1, rows, cols);
            printf("Enter elements of Matrix 2:\n");
            createMatrix(&matrix2, rows, cols);
        } else if (choice == 2) {
            addMatrices(matrix1, matrix2, &result, rows, cols);
        } else if (choice == 3) {
            displayMatrix(result);
        }
    } while (choice != 4);
    return 0;
}


question19  BFs and  DFS   ------------------------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int vertex;
    struct Node* next;
} Node;

typedef struct Graph {
    int numVertices;
    Node** adjLists;
    int* visited;
} Graph;

Node* createNode(int vertex) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->vertex = vertex;
    newNode->next = NULL;
    return newNode;
}

Graph* createGraph(int vertices) {
    int i;
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->numVertices = vertices;
    graph->adjLists = malloc(vertices * sizeof(Node*));
    graph->visited = malloc(vertices * sizeof(int));
    for (i = 0; i < vertices; i++) {
        graph->adjLists[i] = NULL;
        graph->visited[i] = 0;
    }
    return graph;
}

void addEdge(Graph* graph, int src, int dest) {
    Node* newNode = createNode(dest);
    newNode->next = graph->adjLists[src];
    graph->adjLists[src] = newNode;

    newNode = createNode(src);
    newNode->next = graph->adjLists[dest];
    graph->adjLists[dest] = newNode;
}

void BFS(Graph* graph, int startVertex) {
    int queue[100], front = 0, rear = -1;
    Node* temp;
    queue[++rear] = startVertex;
    graph->visited[startVertex] = 1;
    while (front <= rear) {
        int currentVertex = queue[front++];
        printf("%d ", currentVertex);
        temp = graph->adjLists[currentVertex];
        while (temp) {
            int adjVertex = temp->vertex;
            if (!graph->visited[adjVertex]) {
                graph->visited[adjVertex] = 1;
                queue[++rear] = adjVertex;
            }
            temp = temp->next;
        }
    }
}

void DFS(Graph* graph, int vertex) {
    Node* adjList = graph->adjLists[vertex];
    Node* temp = adjList;
    graph->visited[vertex] = 1;
    printf("%d ", vertex);
    while (temp) {
        int connectedVertex = temp->vertex;
        if (!graph->visited[connectedVertex])
            DFS(graph, connectedVertex);
        temp = temp->next;
    }
}

int main() {
    int vertices, choice, src, dest, startVertex,i;
    Graph* graph;
    printf("Enter number of vertices: ");
    scanf("%d", &vertices);
    graph = createGraph(vertices);
    do {
        printf("\n1. Add Edge\n2. BFS\n3. DFS\n4. Exit\n");
        scanf("%d", &choice);
        if (choice == 1) {
            printf("Enter source and destination: ");
            scanf("%d %d", &src, &dest);
            addEdge(graph, src, dest);
        } else if (choice == 2) {
            printf("Enter starting vertex for BFS: ");
            scanf("%d", &startVertex);
            for (i = 0; i < vertices; i++) graph->visited[i] = 0;
            BFS(graph, startVertex);
        } else if (choice == 3) {
            printf("Enter starting vertex for DFS: ");
            scanf("%d", &startVertex);
            for ( i = 0; i < vertices; i++) graph->visited[i] = 0;
            DFS(graph, startVertex);
        }
    } while (choice != 4);
    return 0;
}


question20  best fit algoritham-------------------------------------------------------------------------------------------

#include <stdio.h>
#include <limits.h>

void bestFit(int blockSize[], int m, int processSize[], int n) {
    int allocation[n], i, j;
    for (i = 0; i < n; i++) allocation[i] = -1;
    for (i = 0; i < n; i++) {
        int bestIdx = -1;
        for (j = 0; j < m; j++) {
            if (blockSize[j] >= processSize[i]) {
                if (bestIdx == -1 || blockSize[j] < blockSize[bestIdx])
                    bestIdx = j;
            }
        }
        if (bestIdx != -1) {
            allocation[i] = bestIdx;
            blockSize[bestIdx] -= processSize[i];
        }
    }
    printf("Process No.\tProcess Size\tBlock No.\n");
    for (i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t", i + 1, processSize[i]);
        if (allocation[i] != -1)
            printf("%d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }
}

int main() {
    int blockSize[] = {100, 500, 200, 300, 600};
    int processSize[] = {212, 417, 112, 426};
    int m = sizeof(blockSize) / sizeof(blockSize[0]);
    int n = sizeof(processSize) / sizeof(processSize[0]);
    bestFit(blockSize, m, processSize, n);
    return 0;
}


question21  merge short -------------------------------------------------------------------------------------------

#include <stdio.h>

void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    int leftArr[n1], rightArr[n2];
    int i, j, k;

    for (i = 0; i < n1; i++)
        leftArr[i] = arr[left + i];
    for (j = 0; j < n2; j++)
        rightArr[j] = arr[mid + 1 + j];

    i = 0;
    j = 0;
    k = left;

    while (i < n1 && j < n2) {
        if (leftArr[i] <= rightArr[j]) {
            arr[k] = leftArr[i];
            i++;
        } else {
            arr[k] = rightArr[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = leftArr[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = rightArr[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

void printArray(int arr[], int n) {
    int i;
    for (i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int main() {
    int arr[] = {12, 11, 13, 5, 6, 7};
    int n = sizeof(arr) / sizeof(arr[0]);

    printf("Original array: ");
    printArray(arr, n);

    mergeSort(arr, 0, n - 1);

    printf("Sorted array: ");
    printArray(arr, n);

    return 0;
}


question22 quick short--------------------------------------------------------------------------------------------

#include <stdio.h>
int i,j;
void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;
    for ( j = low; j < high; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return i + 1;
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

void printArray(int arr[], int n) {
    for ( i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int main() {
    int arr[] = {10, 7, 8, 9, 1, 5};
    int n = sizeof(arr) / sizeof(arr[0]);

    printf("Original array: ");
    printArray(arr, n);

    quickSort(arr, 0, n - 1);

    printf("Sorted array: ");
    printArray(arr, n);

    return 0;
}


question23   radixshort--------------------------------------------------------------------------------------------

#include <stdio.h>

int getMax(int arr[], int n) {
    int max = arr[0];
    int i;
    for (i = 1; i < n; i++)
        if (arr[i] > max)
            max = arr[i];
    return max;
}

void countingSort(int arr[], int n, int exp) {
    int output[n];
    int count[10] = {0};
    int i;

    for (i = 0; i < n; i++)
        count[(arr[i] / exp) % 10]++;

    for (i = 1; i < 10; i++)
        count[i] += count[i - 1];

    for (i = n - 1; i >= 0; i--) {
        output[count[(arr[i] / exp) % 10] - 1] = arr[i];
        count[(arr[i] / exp) % 10]--;
    }

    for (i = 0; i < n; i++)
        arr[i] = output[i];
}

void radixSort(int arr[], int n) {
    int max = getMax(arr, n);
    int exp;
    for (exp = 1; max / exp > 0; exp *= 10)
        countingSort(arr, n, exp);
}

void printArray(int arr[], int n) {
    int i;
    for (i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int main() {
    int arr[] = {170, 45, 75, 90, 802, 24, 2, 66};
    int n = sizeof(arr) / sizeof(arr[0]);

    printf("Original array: ");
    printArray(arr, n);

    radixSort(arr, n);

    printf("Sorted array: ");
    printArray(arr, n);

    return 0;
}


question24   heap short---------------------------------------------------------------------------------------------

#include <stdio.h>

int i;
void heapify(int arr[], int n, int i) {
    int largest = i; 
    int left = 2 * i + 1; 
    int right = 2 * i + 2; 

    if (left < n && arr[left] > arr[largest])
        largest = left;

    if (right < n && arr[right] > arr[largest])
        largest = right;

    if (largest != i) {
        int temp = arr[i];
        arr[i] = arr[largest];
        arr[largest] = temp;

        heapify(arr, n, largest);
    }
}


void heapSort(int arr[], int n) {
    for ( i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    for ( i = n - 1; i > 0; i--) {
        int temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;

        heapify(arr, i, 0);
    }
}


void printArray(int arr[], int n) {
    for ( i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int main() {
    int arr[] = {12, 11, 13, 5, 6, 7};
    int n = sizeof(arr) / sizeof(arr[0]);

    printf("Original array: ");
    printArray(arr, n);

    heapSort(arr, n);

    printf("Sorted array: ");
    printArray(arr, n);

    return 0;
}



Question25   dictonary short--------------------------------------------------------------------------------------------------------

 #include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;
 int i;
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insert(Node** bucket, int data) {
    Node* newNode = createNode(data);
    if (*bucket == NULL || (*bucket)->data >= data) {
        newNode->next = *bucket;
        *bucket = newNode;
    } else {
        Node* current = *bucket;
        while (current->next != NULL && current->next->data < data) {
            current = current->next;
        }
        newNode->next = current->next;
        current->next = newNode;
    }
}

void printSortedArray(Node** buckets, int numBuckets) {
    for ( i = 0; i < numBuckets; i++) {
        Node* current = buckets[i];
        while (current != NULL) {
            printf("%d ", current->data);
            current = current->next;
        }
    }
    printf("\n");
}

void bucketSort(int arr[], int n) {
    int max = arr[0];
    for ( i = 1; i < n; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    int numBuckets = max / 10 + 1;
    Node* buckets[numBuckets];
    for ( i = 0; i < numBuckets; i++) {
        buckets[i] = NULL;
    }
    for ( i = 0; i < n; i++) {
        int bucketIndex = arr[i] / 10;
        insert(&buckets[bucketIndex], arr[i]);
    }
    printSortedArray(buckets, numBuckets);
    for (i = 0; i < numBuckets; i++) {
        Node* current = buckets[i];
        while (current != NULL) {
            Node* temp = current;
            current = current->next;
            free(temp);
        }
    }
}

int main() {
    int arr[] = {29, 25, 3, 49, 9, 37, 21, 43};
    int n = sizeof(arr) / sizeof(arr[0]);
    printf("Original array: ");
    int i;
    for ( i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
    printf("Sorted array: ");
    bucketSort(arr, n);
    return 0;
}
